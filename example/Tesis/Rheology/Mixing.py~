from pyomo.environ import*

def model():

    m=ConcreteModel()

    #----------------------------------------------------------------------------------------------
    #Parameters
    #----------------------------------------------------------------------------------------------

    #Otto metzner
    m.ks=
    
    #Max drop size
    m.A_t=Param(default=0.054)         #Davis- Hinze Kolmogorov [1]
    m.A_n=Param(default=4.1)           #Davis- Hinze Kolmogorov [2]

    #Mixing parameters
    m.ks=Param( default=11)                      #Otto Metzner Constant [-]
    m.D_I=Param(default=0.9117 )                 #Imperler Diameter [m]

    #----------------------------------------------------------------------------------------------
    #Variables
    #----------------------------------------------------------------------------------------------
    
    m.Ep=Var(domain=PositiveReals,initialize=30)                         #Energy dissipation [W/kg]
     
    m.dKI=Var(domain=PositiveReals,initialize=5)                         #Dimensional group [m]
    m.dD =Var(domain=PositiveReals,initialize=20, bounds=(1, 100))       #D32  [1e-6 m]

    #External variables

    m.c_den=Var(domain=PositiveReals, initialize=den)                    #Continuos phase viscosity [g/cm3]
    m.Sr =Var(domain=PositiveRels)                                       #Shear rate         [s-1]
    m.N=Var(initialize=4, bounds=(1e-3, 1000))                           #Revolution Number  [s-1]
    m.st =Var(domain=PositiveReals, initialize=st0)                      #S. Tension [mN/m]

              
    #----------------------------------------------------------------------------------------------
    #Constraint
    #----------------------------------------------------------------------------------------------
       
    def Sh_def(m,i):                            #Shear rate definition
        return m.Sr==m.ks*m.N
    m.Sh_def=Constraint(rule=Sh_def)

    def Ep_def(m):                              #Dissipation definition
            return m.Ep==0.407*pow(m.N,3)*m.D_I**2
    m.Ep_def=Constraint(rule=Ep_def)

    def dKI_def(m):                             #dKI definition
        return m.dKI==(m.Ep**(-2/5))*( (1e-3*m.st) **(3/5))*((1e3*m.c_den)**(-3/5))
    m.dKI_def=Constraint(rule=dKI_def)

    def dD_def(m):
        return 1e-6*m.dD==m.A_t*(1+m.A_n*(0.1*m.d_mu)*(m.Ep**(1/3))*((1e-6*m.dD)**(1/3))/(1e-3*m.st))**(3/5)*m.dKI
    m.dD_def=Constraint(rule=dD_def)

    

