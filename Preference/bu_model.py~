
#-------------------------------------------------------------------------------------------
#                      S.7 Product and operation costing
#-------------------------------------------------------------------------------------------


#Parameters
m.Pref2=Param(default=7133.97106065432)        #Competence preference
m.Price2=Param(default=0.120479432361*0.25)    #Competence cost
m.Y=    Param(default=8648277.12955084*1.75)   #Total consumer P

def DT_def(m):  #Total demand definition
    return m.Y/m.Price2
m.DT=Param(rule=DT_def)                        #Total demand 

m.alp=  Param(default=0.5 )                    #Product Awareness
m.ela=  Param(default=2)                       #Product Elasticity 

#Variables
m.B_r =Var(bounds=(0,3), initialize=1)          #Preference Ratio
m.Dem =Var(domain=PositiveReals,initialize=2e3) #Product Demand
m.Price=Var(bounds=(0,2), initialize=m.Price2)  #Product Price
m.Cost=Var(domain= PositiveReals)               #Product Cost [g/ 100 grm ]


#Constraints 

def Cost_Def(m):                   #Product cost definition
    return sum( m.mass[i]*m.blo[i].Cost for i in ('cont','disp'))/100==m.Cost
#m.Cost_Def=Constraint(rule=Cost_Def)

def Dem_def(m):                    #Demand definition
    return m.Dem==m.DT/(1+(m.alp/m.B_r)**(m.ela/(m.ela-1)))
#m.Dem_def=Constraint(rule=Dem_def)

def Comp_Con(m):                   #Competition Constraint
    return m.Price*m.Dem==(m.alp/m.B_r)**m.ela*((m.Y-m.Price*m.Dem)/m.Price2)**(1-m.ela)*m.Dem**m.ela*m.Price2
#m.Comp_Con=Constraint(rule=Comp_Con)

def Br_def(m):                     #Customer preference definition
    return m.B_r==m.pref.Pr/m.Pref2
#m.Br_def=Constraint(rule=Br_def)
